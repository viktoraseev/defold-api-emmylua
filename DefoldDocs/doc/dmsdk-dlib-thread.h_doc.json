{
  "elements": [
    {
      "type": "TYPEDEF",
      "name": "ThreadStart",
      "brief": "",
      "description": "",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "New",
      "brief": "create a new thread",
      "description": "Create a new named thread",
      "returnvalues": [
        {
          "name": "thread",
          "doc": "Thread handle",
          "types": [
            "dmThread::Thread"
          ]
        }
      ],
      "parameters": [
        {
          "name": "thread_start",
          "doc": "Thread entry function",
          "types": [
            "ThreadStart"
          ],
          "is_optional": "False"
        },
        {
          "name": "stack_size",
          "doc": "Stack size",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        },
        {
          "name": "arg",
          "doc": "Thread argument",
          "types": [
            "void*"
          ],
          "is_optional": "False"
        },
        {
          "name": "name",
          "doc": "Thread name",
          "types": [
            "const char*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "Create a thread\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;dmsdk/dlib/thread.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Context</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">m_DoWork</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\">  </span><span class=\"n\">m_Work</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">Worker</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">_ctx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Context</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">_ctx</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">m_DoWork</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">m_Work</span><span class=\"o\">++</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// do work</span>\n<span class=\"w\">        </span><span class=\"n\">dmTime</span><span class=\"o\">::</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"mi\">1000</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// yield</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">StartThread</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_DoWork</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Work</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmThread</span><span class=\"o\">::</span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"kr\">thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmThread</span><span class=\"o\">::</span><span class=\"n\">New</span><span class=\"p\">(</span><span class=\"n\">Worker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x80000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;my_thread&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// do other work...</span>\n<span class=\"w\">    </span><span class=\"c1\">// ..eventually stop the thread:</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_DoWork</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// wait for thread</span>\n<span class=\"w\">    </span><span class=\"n\">dmThread</span><span class=\"o\">::</span><span class=\"n\">Join</span><span class=\"p\">(</span><span class=\"kr\">thread</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;work done: %d</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">m_Work</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "thread name currently not supported on win32"
      ],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Join",
      "brief": "join thread",
      "description": "Join thread. Waits for the thread specified by thread to terminate.  If\nthat thread has already terminated, then Join() returns immediately.  The\nthread specified by thread must be joinable (see Detach()).",
      "returnvalues": [],
      "parameters": [
        {
          "name": "thread",
          "doc": "Thread to join",
          "types": [
            "dmThread::Thread"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Detach",
      "brief": "detach thread",
      "description": "Detach thread. When a detached thread terminates, its resources are\nautomatically released back to the system without the need for another\nthread to join with the terminated thread.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "thread",
          "doc": "Thread to detach",
          "types": [
            "dmThread::Thread"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "AllocTls",
      "brief": "allocate thread local storage key",
      "description": "Allocate thread local storage key",
      "returnvalues": [
        {
          "name": "key",
          "doc": "Key",
          "types": [
            "dmThread::TlsKey"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "FreeTls",
      "brief": "free thread local storage key",
      "description": "Free thread local storage key",
      "returnvalues": [],
      "parameters": [
        {
          "name": "key",
          "doc": "Key",
          "types": [
            "dmThread::TlsKey"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "SetTlsValue",
      "brief": "set thread specific data",
      "description": "Set thread specific data",
      "returnvalues": [],
      "parameters": [
        {
          "name": "key",
          "doc": "Key",
          "types": [
            "dmThread::TlsKey"
          ],
          "is_optional": "False"
        },
        {
          "name": "value",
          "doc": "Value",
          "types": [
            "void*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "GetTlsValue",
      "brief": "get thread specific data",
      "description": "Get thread specific data",
      "returnvalues": [],
      "parameters": [
        {
          "name": "key",
          "doc": "Key",
          "types": [
            "dmThread::TlsKey"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "GetCurrentThread",
      "brief": "gets the current thread",
      "description": "Gets the current thread",
      "returnvalues": [
        {
          "name": "thread",
          "doc": "the current thread",
          "types": [
            "dmThread::Thread"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "SetThreadName",
      "brief": "sets the current thread name",
      "description": "Sets the current thread name",
      "returnvalues": [],
      "parameters": [
        {
          "name": "thread",
          "doc": "the thread",
          "types": [
            "dmThread::Thread"
          ],
          "is_optional": "False"
        },
        {
          "name": "name",
          "doc": "the thread name",
          "types": [
            "const char*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "The thread argument is unused on Darwin (uses current thread)"
      ],
      "language": ""
    }
  ],
  "info": {
    "namespace": "dmThread",
    "name": "Thread",
    "brief": "SDK Thread API documentation",
    "description": "[file:<dmsdk/dlib/thread.h>]\n\nThread functions.",
    "path": "dmsdk/dlib/thread.h",
    "file": "dmsdk/dlib/thread.h",
    "notes": [],
    "language": "C++"
  }
}