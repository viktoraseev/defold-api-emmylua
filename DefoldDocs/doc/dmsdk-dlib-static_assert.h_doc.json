{
  "elements": [
    {
      "type": "MACRO",
      "name": "DM_STATIC_ASSERT",
      "brief": "compile time assert",
      "description": "This is using C++11 <code>static_assert</code> on platforms that support it and use c++11. Otherwise\nit's using a c construct to check the condition.\nAs such, it is currently required to be used whithin a function scope.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "x",
          "doc": "expression",
          "types": [
            "bool"
          ],
          "is_optional": "False"
        },
        {
          "name": "xmsg",
          "doc": "expression",
          "types": [
            "string"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "Verify the size of a struct is within a limit\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_STATIC_ASSERT</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">MyStruct</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Invalid_Struct_Size</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    }
  ],
  "info": {
    "namespace": "dmStaticAssert",
    "name": "Static Assert",
    "brief": "Static assert",
    "description": "```cpp\nvoid test() {\n    DM_STATIC_ASSERT(sizeof(int) == 4, Invalid_int_size);\n}\n```",
    "path": "dmsdk/dlib/static_assert.h",
    "file": "dmsdk/dlib/static_assert.h",
    "notes": [],
    "language": "C++"
  }
}