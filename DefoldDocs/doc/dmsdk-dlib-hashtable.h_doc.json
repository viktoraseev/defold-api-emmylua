{
  "elements": [
    {
      "type": "CLASS",
      "name": "dmHashTable",
      "brief": "hashtable",
      "description": "Hashtable with chaining for collision resolution, memcpy-copy semantics (POD types) and 32-bit indicies instead of pointers. (NUMA-friendly)",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [
        {
          "name": "KEY",
          "doc": "",
          "type": ""
        },
        {
          "name": "T",
          "doc": "",
          "type": ""
        }
      ],
      "members": [],
      "notes": [
        "The key type needs to support == and % operators"
      ],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashTable",
      "brief": "Constructor. Create an empty hashtable with zero c...",
      "description": "Constructor. Create an empty hashtable with zero capacity and zero hashtable (buckets)",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashTable",
      "brief": "Creates a hashtable array with user allocated memo...",
      "description": "Creates a hashtable array with user allocated memory.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "user_allocated",
          "doc": "Pointer to user allocated continous data-block ((table_size<em>sizeof(uint32_t)) + (capacity</em>sizeof(dmHashTable::Entry))",
          "types": [
            "void*"
          ],
          "is_optional": "False"
        },
        {
          "name": "table_size",
          "doc": "Hashtable size, ie number of buckets. table_size &lt; 0xffffffff",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        },
        {
          "name": "capacity",
          "doc": "Capacity. capacity &lt; 0xffffffff",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "User allocated arrays can not change capacity."
      ],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Clear",
      "brief": "Removes all the entries from the table.",
      "description": "Removes all the entries from the table.",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Size",
      "brief": "Number of entries stored in table. (not the actual...",
      "description": "Number of entries stored in table. (not the actual hashtable size)",
      "returnvalues": [
        {
          "name": "Number",
          "doc": "of entries.",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Capacity",
      "brief": "Hashtable capacity. Maximum number of entries poss...",
      "description": "Hashtable capacity. Maximum number of entries possible to store in table",
      "returnvalues": [
        {
          "name": "",
          "doc": "the capacity of the table",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "SetCapacity",
      "brief": "Set hashtable capacity. New capacity must be great...",
      "description": "Set hashtable capacity. New capacity must be greater or equal to current capacity",
      "returnvalues": [],
      "parameters": [
        {
          "name": "table_size",
          "doc": "Hashtable size, ie number of buckets. table_size &lt; 0xffffffff",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        },
        {
          "name": "capacity",
          "doc": "Capacity. capacity &lt; 0xffffffff",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "OffsetCapacity",
      "brief": "hashtable offset capacity",
      "description": "Relative change of capacity\nEquivalent to SetCapacity(Capacity() + offset).\nOnly allowed for auto-allocated hash tables and will result in a new dynamic allocation",
      "returnvalues": [],
      "parameters": [
        {
          "name": "offset",
          "doc": "relative amount of elements to change the capacity",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Swap",
      "brief": "Swaps the contents of two hash tables",
      "description": "Swaps the contents of two hash tables",
      "returnvalues": [],
      "parameters": [
        {
          "name": "other",
          "doc": "the other table",
          "types": [
            "dmHashTable<KEY, T>&"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Full",
      "brief": "Check if the table is full",
      "description": "Check if the table is full",
      "returnvalues": [
        {
          "name": "true",
          "doc": "if the table is full",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Empty",
      "brief": "Check if the table is empty",
      "description": "Check if the table is empty",
      "returnvalues": [
        {
          "name": "true",
          "doc": "if the table is empty",
          "types": [
            ""
          ]
        }
      ],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Put",
      "brief": "Put key/value pair in hash table. NOTE: The method...",
      "description": "Put key/value pair in hash table. NOTE: The method will \"assert\" if the hashtable is full.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "key",
          "doc": "Key",
          "types": [
            "KEY"
          ],
          "is_optional": "False"
        },
        {
          "name": "value",
          "doc": "Value",
          "types": [
            "const T&"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Get",
      "brief": "Get pointer to value from key",
      "description": "Get pointer to value from key",
      "returnvalues": [
        {
          "name": "value",
          "doc": "Pointer to value. NULL if the key/value pair doesn't exist.",
          "types": [
            "T*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "key",
          "doc": "Key",
          "types": [
            "KEY"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Erase",
      "brief": "Remove key/value pair.",
      "description": "Remove key/value pair.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "key",
          "doc": "Key to remove",
          "types": [
            "KEY"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Only valid if key exists in table"
      ],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "Iterate",
      "brief": "Iterate over all entries in table",
      "description": "Iterate over all entries in table",
      "returnvalues": [],
      "parameters": [
        {
          "name": "call_back",
          "doc": "Call-back called for every entry",
          "types": [
            "void*"
          ],
          "is_optional": "False"
        },
        {
          "name": "context",
          "doc": "Context",
          "types": [
            "CONTEXT*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [
        {
          "name": "CONTEXT",
          "doc": "",
          "type": ""
        }
      ],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "STRUCT",
      "name": "Iterator",
      "brief": "Iterator to the key/value pairs of a hash table",
      "description": "Iterator to the key/value pairs of a hash table",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [
        {
          "name": "GetKey()",
          "doc": "",
          "type": ""
        },
        {
          "name": "GetValue()",
          "doc": "",
          "type": ""
        }
      ],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "GetIterator",
      "brief": "Get an iterator for the key/value pairs",
      "description": "Get an iterator for the key/value pairs",
      "returnvalues": [
        {
          "name": "iterator",
          "doc": "the iterator",
          "types": [
            "dmHashTable<T>::Iterator"
          ]
        }
      ],
      "parameters": [],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmHashTable</span><span class=\"o\">&lt;</span><span class=\"n\">dmhash_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">Iterator</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ht</span><span class=\"p\">.</span><span class=\"n\">GetIterator</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">Next</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%s: %d</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dmHashReverseSafe64</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">GetKey</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">GetValue</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "CLASS",
      "name": "dmHashTable16",
      "brief": "Specialized hash table with <span class=\"type\">uint16_t</span> as key...",
      "description": "Specialized hash table with <span class=\"type\">uint16_t</span> as keys",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "CLASS",
      "name": "dmHashTable32",
      "brief": "Specialized hash table with <span class=\"type\">uint32_t</span> as key...",
      "description": "Specialized hash table with <span class=\"type\">uint32_t</span> as keys",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "CLASS",
      "name": "dmHashTable64",
      "brief": "Specialized hash table with <span class=\"type\">uint64_t</span> as key...",
      "description": "Specialized hash table with <span class=\"type\">uint64_t</span> as keys",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    }
  ],
  "info": {
    "namespace": "",
    "name": "Hashtable",
    "brief": "Hash table",
    "description": "Hash table",
    "path": "dmsdk/dlib/hashtable.h",
    "file": "dmsdk/dlib/hashtable.h",
    "notes": [],
    "language": "C++"
  }
}