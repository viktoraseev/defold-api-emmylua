{
  "elements": [
    {
      "type": "TYPEDEF",
      "name": "dmhash_t",
      "brief": "dmhash_t type definition",
      "description": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"kt\">uint64_t</span><span class=\"w\"> </span><span class=\"n\">dmhash_t</span><span class=\"w\"></span>\n</code></pre></div>",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashBuffer32",
      "brief": "Calculate 32-bit hash value from buffer",
      "description": "Calculate 32-bit hash value from buffer",
      "returnvalues": [
        {
          "name": "hash",
          "doc": "hash value",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "buffer",
          "doc": "Buffer",
          "types": [
            "const void*"
          ],
          "is_optional": "False"
        },
        {
          "name": "buffer_len",
          "doc": "Length of buffer",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashBuffer64",
      "brief": "calculate 64-bit hash value from buffer",
      "description": "calculate 64-bit hash value from buffer",
      "returnvalues": [
        {
          "name": "hash",
          "doc": "hash value",
          "types": [
            "uint64_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "buffer",
          "doc": "Buffer",
          "types": [
            "const void*"
          ],
          "is_optional": "False"
        },
        {
          "name": "buffer_len",
          "doc": "Length of buffer",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashString32",
      "brief": "Calculate 32-bit hash value from string",
      "description": "Calculate 32-bit hash value from string",
      "returnvalues": [
        {
          "name": "hash",
          "doc": "hash value",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "string",
          "doc": "Null terminated string",
          "types": [
            "const char*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashString64",
      "brief": "calculate 64-bit hash value from string",
      "description": "calculate 64-bit hash value from string",
      "returnvalues": [
        {
          "name": "hash",
          "doc": "hash value",
          "types": [
            "uint64_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "string",
          "doc": "Null terminated string",
          "types": [
            "const char*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashReverseSafe64",
      "brief": "get string value from hash",
      "description": "Returns the original string used to produce a hash.\nAlways returns a null terminated string. Returns \"<unknown>\" if the original string wasn't found.",
      "returnvalues": [
        {
          "name": "",
          "doc": "Original string value or \"<unknown>\" if it wasn't found.",
          "types": [
            "const char*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "hash",
          "doc": "hash value",
          "types": [
            "uint64_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Do not store this pointer"
      ],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashReverseSafe64",
      "brief": "get string value from hash",
      "description": "Reverse hash lookup. Maps hash to original data. It is guaranteed that the returned\nbuffer is null-terminated. If the buffer contains a valid c-string\nit can safely be used in printf and friends.",
      "returnvalues": [
        {
          "name": "",
          "doc": "pointer to buffer. 0 if no reverse exists or if reverse lookup is disabled",
          "types": [
            "const char*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "hash",
          "doc": "hash to lookup",
          "types": [
            "uint64_t"
          ],
          "is_optional": "False"
        },
        {
          "name": "length",
          "doc": "original data length. Optional argument and NULL-pointer is accepted.",
          "types": [
            "uint32_t*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Do not store this pointer"
      ],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashReverseSafe32",
      "brief": "get string value from hash",
      "description": "Returns the original string used to produce a hash.\nAlways returns a null terminated string. Returns \"<unknown>\" if the original string wasn't found.",
      "returnvalues": [
        {
          "name": "",
          "doc": "Original string value or \"<unknown>\" if it wasn't found.",
          "types": [
            "const char*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "hash",
          "doc": "hash value",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Do not store this pointer"
      ],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashReverseSafe32",
      "brief": "get string value from hash",
      "description": "Reverse hash lookup. Maps hash to original data. It is guaranteed that the returned\nbuffer is null-terminated. If the buffer contains a valid c-string\nit can safely be used in printf and friends.",
      "returnvalues": [
        {
          "name": "",
          "doc": "pointer to buffer. 0 if no reverse exists or if reverse lookup is disabled",
          "types": [
            "const char*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "hash",
          "doc": "hash to lookup",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        },
        {
          "name": "length",
          "doc": "original data length. Optional argument and NULL-pointer is accepted.",
          "types": [
            "uint32_t*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Do not store this pointer"
      ],
      "language": ""
    },
    {
      "type": "STRUCT",
      "name": "HashState32",
      "brief": "Hash state used for 32-bit incremental hashing",
      "description": "Hash state used for 32-bit incremental hashing",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "STRUCT",
      "name": "HashState64",
      "brief": "Hash state used for 64-bit incremental hashing",
      "description": "Hash state used for 64-bit incremental hashing",
      "returnvalues": [],
      "parameters": [],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashInit32",
      "brief": "Initialize hash-state for 32-bit incremental hashi...",
      "description": "Initialize hash-state for 32-bit incremental hashing",
      "returnvalues": [],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState32*"
          ],
          "is_optional": "False"
        },
        {
          "name": "reverse_hash",
          "doc": "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH",
          "types": [
            "bool"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashClone32",
      "brief": "Clone 32-bit incremental hash state",
      "description": "Clone 32-bit incremental hash state",
      "returnvalues": [],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState32*"
          ],
          "is_optional": "False"
        },
        {
          "name": "source_hash_state",
          "doc": "Source hash state",
          "types": [
            "HashState32*"
          ],
          "is_optional": "False"
        },
        {
          "name": "reverse_hash",
          "doc": "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH. Ignored if source state reverse hashing is disabled.",
          "types": [
            "bool"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashUpdateBuffer32",
      "brief": "Incremental hashing",
      "description": "Incremental hashing",
      "returnvalues": [],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState32*"
          ],
          "is_optional": "False"
        },
        {
          "name": "buffer",
          "doc": "Buffer",
          "types": [
            "const void*"
          ],
          "is_optional": "False"
        },
        {
          "name": "buffer_len",
          "doc": "Length of buffer",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashFinal32",
      "brief": "Finalize incremental hashing and release associate...",
      "description": "Finalize incremental hashing and release associated resources",
      "returnvalues": [
        {
          "name": "hash",
          "doc": "the hash value",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState32*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashRelease32",
      "brief": "Release incremental hashing resources\nUsed to rele...",
      "description": "Release incremental hashing resources\nUsed to release assocciated resources for intermediate incremental hash states.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState32*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashInit64",
      "brief": "Initialize hash-state for 64-bit incremental hashi...",
      "description": "Initialize hash-state for 64-bit incremental hashing",
      "returnvalues": [],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState64*"
          ],
          "is_optional": "False"
        },
        {
          "name": "reverse_hash",
          "doc": "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH",
          "types": [
            "bool"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashClone64",
      "brief": "Clone 64-bit incremental hash state",
      "description": "Clone 64-bit incremental hash state",
      "returnvalues": [],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState64*"
          ],
          "is_optional": "False"
        },
        {
          "name": "source_hash_state",
          "doc": "Source hash state",
          "types": [
            "HashState64*"
          ],
          "is_optional": "False"
        },
        {
          "name": "reverse_hash",
          "doc": "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH. Ignored if source state reverse hashing is disabled.",
          "types": [
            "bool"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashUpdateBuffer64",
      "brief": "Incremental hashing",
      "description": "Incremental hashing",
      "returnvalues": [],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState64*"
          ],
          "is_optional": "False"
        },
        {
          "name": "buffer",
          "doc": "Buffer",
          "types": [
            "const void*"
          ],
          "is_optional": "False"
        },
        {
          "name": "buffer_len",
          "doc": "Length of buffer",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashFinal64",
      "brief": "Finalize incremental hashing and release associate...",
      "description": "Finalize incremental hashing and release associated resources",
      "returnvalues": [
        {
          "name": "hash",
          "doc": "The hash value",
          "types": [
            "uint64_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState64*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashRelease64",
      "brief": "Release incremental hashing resources\nUsed to rele...",
      "description": "Release incremental hashing resources\nUsed to release assocciated resources for intermediate incremental hash states.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "hash_state",
          "doc": "Hash state",
          "types": [
            "HashState64*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "DM_HASH_REVERSE_MEM",
      "brief": "Allocate stack memory context for safely reversing...",
      "description": "Allocate stack memory context for safely reversing hash values into strings",
      "returnvalues": [],
      "parameters": [
        {
          "name": "name",
          "doc": "The name of the dmAllocator struct",
          "types": [
            "symbol"
          ],
          "is_optional": "False"
        },
        {
          "name": "size",
          "doc": "The max size of the stack allocated context",
          "types": [
            "size_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashReverseSafe64Alloc",
      "brief": "get string value from hash",
      "description": "Returns the original string used to produce a hash.",
      "returnvalues": [
        {
          "name": "",
          "doc": "Original string value or \"<unknown:value>\" if it wasn't found,\n                           or \"<unknown>\" if the allocator failed to allocate more memory.\n                           Always returns a null terminated string.",
          "types": [
            "const char*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "allocator",
          "doc": "The reverse hash allocator",
          "types": [
            "dmAllocator*"
          ],
          "is_optional": "False"
        },
        {
          "name": "hash",
          "doc": "hash value",
          "types": [
            "uint64_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "Get the string representaiton of a hash value\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_HASH_REVERSE_MEM</span><span class=\"p\">(</span><span class=\"n\">hash_ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">reverse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dmHashReverseSafe64Alloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">hash_ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hash</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "This function is thread safe",
        "The pointer is valid during the scope of the allocator"
      ],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "dmHashReverseSafe32Alloc",
      "brief": "get string value from hash",
      "description": "Returns the original string used to produce a hash.",
      "returnvalues": [
        {
          "name": "",
          "doc": "Original string value or \"<unknown:value>\" if it wasn't found,\n                           or \"<unknown>\" if the allocator failed to allocate more memory.\n                           Always returns a null terminated string.",
          "types": [
            "const char*"
          ]
        }
      ],
      "parameters": [
        {
          "name": "allocator",
          "doc": "The reverse hash allocator",
          "types": [
            "dmAllocator*"
          ],
          "is_optional": "False"
        },
        {
          "name": "hash",
          "doc": "hash value",
          "types": [
            "uint32_t"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "Get the string representaiton of a hash value\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_HASH_REVERSE_MEM</span><span class=\"p\">(</span><span class=\"n\">hash_ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">reverse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dmHashReverseSafe32Alloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">hash_ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hash</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "This function is thread safe",
        "The pointer is valid during the scope of the allocator"
      ],
      "language": ""
    }
  ],
  "info": {
    "namespace": "",
    "name": "Hash",
    "brief": "SDK Hash API documentation",
    "description": "Hash functions.",
    "path": "dmsdk/dlib/hash.h",
    "file": "dmsdk/dlib/hash.h",
    "notes": [],
    "language": "C++"
  }
}