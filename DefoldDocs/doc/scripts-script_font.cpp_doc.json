{
  "elements": [
    {
      "type": "FUNCTION",
      "name": "font.add_glyphs",
      "brief": "adds more glyphs to a .fontc resource",
      "description": "Asynchronoously adds more glyphs to a .fontc resource",
      "returnvalues": [
        {
          "name": "request_id",
          "doc": "Returns the asynchronous request id",
          "types": [
            "number"
          ]
        }
      ],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the .fontc resource",
          "types": [
            "string",
            "hash"
          ],
          "is_optional": "False"
        },
        {
          "name": "text",
          "doc": "A string with unique unicode characters to be loaded",
          "types": [
            "string"
          ],
          "is_optional": "False"
        },
        {
          "name": "callback",
          "doc": "(optional) A callback function that is called after the request is finished\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>request_id</code></dt>\n<dd><span class=\"type\">number</span> The request id</dd>\n<dt><code>result</code></dt>\n<dd><span class=\"type\">boolean</span> True if request was succesful</dd>\n<dt><code>errstring</code></dt>\n<dd><span class=\"type\">string</span> <code>nil</code> if the request was successful</dd>\n</dl>",
          "types": [
            "function(self, request_id, result, errstring)"
          ],
          "is_optional": "True"
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Add glyphs</span>\n<span class=\"kd\">local</span> <span class=\"n\">requestid</span> <span class=\"o\">=</span> <span class=\"n\">font</span><span class=\"p\">.</span><span class=\"n\">add_glyphs</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/my.fontc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;abcABC123&quot;</span><span class=\"p\">,</span> <span class=\"kr\">function</span> <span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">errstring</span><span class=\"p\">)</span>\n        <span class=\"c1\">-- make a note that all the glyphs are loaded</span>\n        <span class=\"c1\">-- and we&#39;re ready to present the text</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">dialog_text_ready</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"kr\">end</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Remove glyphs</span>\n<span class=\"kd\">local</span> <span class=\"n\">requestid</span> <span class=\"o\">=</span> <span class=\"n\">font</span><span class=\"p\">.</span><span class=\"n\">remove_glyphs</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/my.fontc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;abcABC123&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "The generated glyph bitmaps are stored in memory, for easy transition into the glyph cache texture.\nYou can call `font.remove_glyphs()` to remove them from memory.",
        "A glyph residing in the glyph cache will stay there until it's evicted.\nIt will not be removed from the glyph cache by removing the loaded glyphs from the .fontc resource."
      ],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "font.remove_glyphs",
      "brief": "removes glyphs from the font",
      "description": "Removes glyphs from the font",
      "returnvalues": [],
      "parameters": [
        {
          "name": "path",
          "doc": "The path to the .fontc resource",
          "types": [
            "string",
            "hash"
          ],
          "is_optional": "False"
        },
        {
          "name": "text",
          "doc": "A string with unique unicode characters to be removed",
          "types": [
            "string"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    }
  ],
  "info": {
    "namespace": "",
    "name": "",
    "brief": "",
    "description": "",
    "path": "",
    "file": "",
    "notes": [],
    "language": "Lua"
  }
}