{
  "elements": [
    {
      "type": "FUNCTION",
      "name": "StrLen",
      "brief": "Get number of unicode characters in utf-8 string",
      "description": "Get number of unicode characters in utf-8 string",
      "returnvalues": [
        {
          "name": "length",
          "doc": "Number of characters",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "str",
          "doc": "Utf8 string",
          "types": [
            "const char*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;\u00e5\u00e4\u00f6\u00c5\u00c4\u00d6&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmUtf8</span><span class=\"o\">::</span><span class=\"n\">StrLen</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "NextChar",
      "brief": "get next unicode character in utf-8 string.",
      "description": "Get next unicode character in utf-8 string. Iteration terminates at '\\0' and repeated invocations will return '\\0'",
      "returnvalues": [
        {
          "name": "chr",
          "doc": "Decoded unicode character",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "str",
          "doc": "Pointer to string. The pointer value is updated",
          "types": [
            "const char**"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;\u00e5\u00e4\u00f6\u00c5\u00c4\u00d6&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">cursor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">codepoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">codepoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmUtf8</span><span class=\"o\">::</span><span class=\"n\">NextChar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cursor</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [],
      "language": ""
    },
    {
      "type": "FUNCTION",
      "name": "ToUtf8",
      "brief": "Convert a 16-bit unicode character to utf-8",
      "description": "Convert a 16-bit unicode character to utf-8",
      "returnvalues": [
        {
          "name": "length",
          "doc": "Number of characters in buffer",
          "types": [
            "uint32_t"
          ]
        }
      ],
      "parameters": [
        {
          "name": "chr",
          "doc": "Character to convert",
          "types": [
            "uint16_t"
          ],
          "is_optional": "False"
        },
        {
          "name": "buf",
          "doc": "output Buffer (at least 4 bytes)",
          "types": [
            "char*"
          ],
          "is_optional": "False"
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": [
        "Buffer must be of at least 4 characters. The string is *not* NULL-terminated"
      ],
      "language": ""
    }
  ],
  "info": {
    "namespace": "dmUtf8",
    "name": "Utf8",
    "brief": "SDK Utf8 API documentation",
    "description": "SDK Utf8 API documentation",
    "path": "dmsdk/dlib/utf8.h",
    "file": "dmsdk/dlib/utf8.h",
    "notes": [],
    "language": "C++"
  }
}